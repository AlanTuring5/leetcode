// 2022.09.16

// 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素
// 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function (nums) {
    let sum = 0;
    nums.forEach((item) => {
        sum = sum ^ item;
    })
    return sum
};

// 1、异或运算
// 交换律：a ^ b ^ c <=> a ^ c ^ b
// 任何数于0异或为任何数 0 ^ n => n
// 相同的数异或为0: n ^ n => 0

// 2、可使用格外空间的解决方案
// - 集合：有则删除，无则添加
// - 集合：元素唯一，元素之和*2 - 数组之和 = 唯一的数
// - 哈希表：key为数组元素，value为出现次数